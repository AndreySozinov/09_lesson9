# –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1.
# üìå –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
# üìå –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é-
# —É–≥–∞–¥–∞–π–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
# üìå –ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
from typing import Callable
from random import randint as r
__all__ = ['guessing']


def func_closure(func: Callable) -> Callable[[], None]:
    min_number = 1
    max_number = 100
    min_tries = 1
    max_tries = 10

    def wrapper(number, tries):
        if number < min_number or number > max_number:
            number = r(1, 100)
        if tries < min_tries or tries > max_tries:
            tries = r(1, 10)
        func(number, tries)
    return wrapper


@func_closure
def guessing(number: int, tries: int) -> None:
    success = False
    for i in range(tries):
        one_try = int(input(f'–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {tries - i}\n'))
        if one_try < number:
            print('–°–ª–∏—à–∫–æ–º –º–∞–ª–æ.')
        elif one_try > number:
            print('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ.')
        else:
            print(f'–£–≥–∞–¥–∞–ª –∑–∞ {i + 1} –ø–æ–ø—ã—Ç–æ–∫!')
            success = True
            break
    if not success:
        print(f'–°–æ–∂–∞–ª–µ—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {number}')


if __name__ == '__main__':
    guessing(120, 0)
