# –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
from typing import Callable
from random import randint as r
__all__ = ['guessing']


def count(param):
    def func_closure(func: Callable) -> Callable[[], None]:
        min_number = 1
        max_number = 100
        min_tries = 1
        max_tries = 10

        def wrapper(number, tries, *args, **kwargs):
            for _ in range(param):
                if number < min_number or number > max_number:
                    number = r(1, 100)
                if tries < min_tries or tries > max_tries:
                    tries = r(1, 10)
                func(number, tries, *args, **kwargs)
        return wrapper
    return func_closure


@count(3)
def guessing(number: int, tries: int) -> None:
    success = False
    for i in range(tries):
        one_try = int(input(f'–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {tries - i}\n'))
        if one_try < number:
            print('–°–ª–∏—à–∫–æ–º –º–∞–ª–æ.')
        elif one_try > number:
            print('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ.')
        else:
            print(f'–£–≥–∞–¥–∞–ª –∑–∞ {i + 1} –ø–æ–ø—ã—Ç–æ–∫!')
            success = True
            break
    if not success:
        print(f'–°–æ–∂–∞–ª–µ—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {number}')


if __name__ == '__main__':
    guessing(120, 0)
