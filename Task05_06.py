# –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á.
# üìå –§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ:
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
# üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.
from typing import Callable
from random import randint as r
import json
from functools import wraps
__all__ = ['guessing']


def count(param):
    def func_control(func: Callable) -> Callable[[], None]:
        min_number = 1
        max_number = 100
        min_tries = 1
        max_tries = 10

        @wraps(func)
        def wrapper(number, tries, *args, **kwargs):
            for _ in range(param):
                if number < min_number or number > max_number:
                    number = r(1, 100)
                if tries < min_tries or tries > max_tries:
                    tries = r(1, 10)
                func(number, tries, *args, **kwargs)
        return wrapper
    return func_control


def saving(func: Callable):
    @wraps(func)
    def wrapper(*args, **kwargs):
        parameters = []

        json_dict = {'args': args, **kwargs}
        parameters.append(json_dict)

        with open(f'{func.__name__}.json', 'a+', encoding='utf-8') as f:
            json.dump(parameters, f, ensure_ascii=False, indent=2)
    return wrapper


@saving
@count(3)
def guessing(number: int, tries: int) -> None:
    """Game - Catch the number."""
    success = False
    for i in range(tries):
        one_try = int(input(f'–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {tries - i}\n'))
        if one_try < number:
            print('–°–ª–∏—à–∫–æ–º –º–∞–ª–æ.')
        elif one_try > number:
            print('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ.')
        else:
            print(f'–£–≥–∞–¥–∞–ª –∑–∞ {i + 1} –ø–æ–ø—ã—Ç–æ–∫!')
            success = True
            break
    if not success:
        print(f'–°–æ–∂–∞–ª–µ—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {number}')


if __name__ == '__main__':
    guessing(120, 0)
